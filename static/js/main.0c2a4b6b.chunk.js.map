{"version":3,"sources":["api/requestForecast.js","components/SearchBox.jsx","functions/dateConstructor.js","functions/weatherIconSelector.js","components/WeatherBox.jsx","App.jsx","index.js"],"names":["api","requestForecast","localization","a","fetch","response","json","data","Error","SearchBox","props","changeLocalization","search","onSubmit","className","type","placeholder","onChange","value","dateConstructor","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","weatherIconSelector","weather","icons","WeatherBox","cityNameError","main","gate","name","sys","country","Date","Math","round","temp_min","temp","temp_max","description","charAt","toUpperCase","slice","App","useState","setWeather","setLocalization","message","setCityNameError","searchHandler","e","preventDefault","target","elements","trim","cod","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c2a4b6b.chunk.js","sourcesContent":["const api = {\r\n  key: \"77b4d55b2c32af78427d9b3d2b5c9c50\",\r\n  base: \"https://api.openweathermap.org/data/2.5/\",\r\n};\r\n\r\nconst requestForecast = async (localization) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${api.base}weather?q=${localization}&units=metric&APPID=${api.key}`\r\n    );\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (err) {\r\n    throw new Error(err);\r\n  }\r\n};\r\n\r\nexport default requestForecast;\r\n","const SearchBox = (props) => {\r\n  const { localization, changeLocalization, search } = props;\r\n\r\n  return (\r\n    <form onSubmit={search} className=\"searchSpace\">\r\n      <input\r\n        className=\"cityInput\"\r\n        type=\"text\"\r\n        placeholder=\"City...\"\r\n        onChange={changeLocalization}\r\n        value={localization}\r\n      />\r\n      <button type=\"submit\" className=\"cityInput_search\">\r\n        <i className=\"fas fa-search\" />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","const dateConstructor = (d) => {\r\n  let days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n\r\n  let day = days[d.getDay()];\r\n  let date = d.getDate();\r\n  let month = d.getMonth() + 1;\r\n  let year = d.getFullYear();\r\n\r\n  if (date < 10) {\r\n    date = `0${date}`;\r\n  }\r\n  if (month < 10) {\r\n    month = `0${month}`;\r\n  }\r\n\r\n  return `${day} ${date}.${month}.${year}`;\r\n};\r\n\r\nexport default dateConstructor;\r\n","const weatherIconSelector = (weather) => {\r\n  const icons = [\r\n    \"fas fa-sun\",\r\n    \"fas fa-cloud\",\r\n    \"fas fa-cloud-showers-heavy\",\r\n    \"fas fa-smog\",\r\n    \"fas fa-snowflake\",\r\n  ];\r\n  if (weather === \"Clear\") {\r\n    return icons[0];\r\n  } else if (weather === \"Clouds\") {\r\n    return icons[1];\r\n  } else if (weather === \"Rain\") {\r\n    return icons[2];\r\n  } else if (weather === \"Mist\") {\r\n    return icons[3];\r\n  } else if (weather === \"Snow\") {\r\n    return icons[4];\r\n  }\r\n};\r\n\r\nexport default weatherIconSelector;\r\n","import dateConstructor from \"../functions/dateConstructor\";\r\nimport weatherIconSelector from \"../functions/weatherIconSelector\";\r\n\r\nconst WeatherBox = (props) => {\r\n  const { weather, cityNameError } = props;\r\n  return (\r\n    <>\r\n      {typeof weather.main != \"undefined\" || cityNameError.gate === \"false\" ? (\r\n        <div className=\"informationBox\">\r\n          <div className=\"informationBox_Info\">\r\n            <span>\r\n              {weather.name}, {weather.sys.country}\r\n            </span>\r\n            <span>{dateConstructor(new Date())}</span>\r\n          </div>\r\n          <div className=\"informationBox_Weather\">\r\n            <div className=\"weatherInfoWrapper\">\r\n              <i\r\n                className={`${weatherIconSelector(\r\n                  weather.weather[0].main\r\n                )} weatherIcon`}\r\n              ></i>\r\n              <div className=\"degreesSpace\">\r\n                <p className=\"degreesBox\">\r\n                  <span className=\"degreesBox_name\">Min</span>\r\n                  <span className=\"degreesBox_deg\">\r\n                    {Math.round(weather.main.temp_min) + \"°C\"}\r\n                  </span>\r\n                </p>\r\n                <p className=\"degreesBox\">\r\n                  <span className=\"degreesBox_name\">Avg</span>\r\n                  <span className=\"degreesBox_deg\">\r\n                    {Math.round(weather.main.temp) + \"°C\"}\r\n                  </span>\r\n                </p>\r\n                <p className=\"degreesBox\">\r\n                  <span className=\"degreesBox_name\">Max</span>\r\n                  <span className=\"degreesBox_deg\">\r\n                    {Math.round(weather.main.temp_max) + \"°C\"}\r\n                  </span>\r\n                </p>\r\n              </div>\r\n              <p className=\"forecast\">\r\n                {weather.weather[0].description.charAt().toUpperCase()}\r\n                {weather.weather[0].description.slice(1)}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n      {cityNameError.gate === true ? (\r\n        <h1 className=\"errorMessage\">This city cannot be found</h1>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherBox;\r\n","import { useState } from \"react\";\n\nimport requestForecast from \"./api/requestForecast\";\nimport SearchBox from \"./components/SearchBox\";\n\nimport WeatherBox from \"./components/WeatherBox\";\nimport \"./style/App.scss\";\n\nconst App = () => {\n  const [weather, setWeather] = useState(\"\");\n  const [localization, setLocalization] = useState(\"\");\n  const [cityNameError, setCityNameError] = useState({\n    gate: false,\n    message: \"\",\n  });\n\n  const searchHandler = async (e) => {\n    e.preventDefault();\n\n    if (e.target.elements[0].value.trim() === \"\") return;\n\n    const data = await requestForecast(localization);\n\n    if (data && data.cod === \"404\") {\n      setCityNameError({ gate: true, message: data.message });\n      setWeather(\"\");\n      setLocalization(\"\");\n    } else if (data) {\n      setWeather(data);\n      setLocalization(\"\");\n      if (cityNameError.gate === true)\n        setCityNameError({ gate: false, message: data.message });\n    }\n  };\n\n  const changeLocalizationHandler = (e) => {\n    setLocalization(e.target.value);\n  };\n\n  return (\n    <div\n      className={\n        typeof weather.main != \"undefined\"\n          ? weather.main.temp < 16\n            ? \"wrapper cold\"\n            : \"wrapper\"\n          : \"wrapper default\"\n      }\n    >\n      <div className=\"shadowOverlay\" />\n      <div className=\"main\">\n        <SearchBox\n          localization={localization}\n          changeLocalization={changeLocalizationHandler}\n          search={searchHandler}\n        />\n        <WeatherBox weather={weather} cityNameError={cityNameError} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}