{"version":3,"sources":["components/App.js","index.js"],"names":["api","App","useState","weather","setWeather","localization","setLocalization","gate","message","cityNameError","setCityNameError","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","key","fetch","then","response","json","data","cod","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateConstructor","Date","icons","weatherIconSelector","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAIMA,EACC,mCADDA,EAEE,2CAmHOC,MAhHf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA0CJ,mBAAS,CACjDK,MAAM,EACNC,QAAS,KAFX,mBAAOC,EAAP,KAAsBC,EAAtB,KA+DA,OACE,qBACEC,UACyB,oBAAhBR,EAAQS,KACXT,EAAQS,KAAKC,KAAO,GAClB,WACA,MACF,cANR,SASE,sBAAKF,UAAU,UAAf,UACE,qBAAKA,UAAU,cAAf,SACE,uBACEG,KAAK,OACLC,YAAY,UACZC,SAAU,SAACC,GAAD,OAAOX,EAAgBW,EAAEC,OAAOC,QAC1CC,WAhDK,SAACH,GACA,UAAVA,EAAEI,KACmB,KAAnBJ,EAAEC,OAAOC,OACXG,MAAM,GAAD,OACAtB,EADA,qBACqBK,EADrB,+BACwDL,IAE1DuB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACY,QAAbA,EAAKC,KACPjB,EAAiB,CAAEH,MAAM,EAAMC,QAASkB,EAAKlB,UAC7CJ,EAAW,IACXE,EAAgB,MAEhBF,EAAWsB,GACXpB,EAAgB,KACW,IAAvBG,EAAcF,MAChBG,EAAiB,CAAEH,MAAM,EAAOC,QAASkB,EAAKlB,eAiClDW,MAAOd,MAGa,oBAAhBF,EAAQS,MACO,UAAvBH,EAAcF,KACZ,sBAAKI,UAAU,iBAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,iCACGR,EAAQyB,KADX,KACmBzB,EAAQ0B,IAAIC,WAE/B,+BArFY,SAACC,GACvB,IAUIC,EAVO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAGaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAAQL,EAAEM,WAAa,EACvBC,EAAOP,EAAEQ,cASb,OAPIL,EAAO,KACTA,EAAI,WAAOA,IAETE,EAAQ,KACVA,EAAK,WAAOA,IAGR,GAAN,OAAUJ,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA8DjBE,CAAgB,IAAIC,WAE7B,qBAAK9B,UAAU,6BAAf,SACE,sBAAKA,UAAU,qBAAf,UACE,mBAAGA,UAzCW,SAACR,GAC3B,IAAMuC,EAAQ,CAAC,aAAc,eAAgB,8BAC7C,MAAgB,UAAZvC,EACKuC,EAAM,GACQ,WAAZvC,EACFuC,EAAM,GACQ,SAAZvC,EACFuC,EAAM,QADR,EAmCmBC,CAAoBxC,EAAQA,QAAQ,GAAGS,QACrD,4BAAIgC,KAAKC,MAAM1C,EAAQS,KAAKC,MAAQ,UACpC,4BAAIV,EAAQA,QAAQ,GAAGS,eAI3B,MACoB,IAAvBH,EAAcF,KACb,oBAAII,UAAU,eAAd,SAA8BF,EAAcD,UAC1C,WC9GZsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.d34fcc65.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"../style/App.scss\";\n\nconst api = {\n  key: \"77b4d55b2c32af78427d9b3d2b5c9c50\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const [weather, setWeather] = useState(\"\");\n  const [localization, setLocalization] = useState(\"\");\n  const [cityNameError, setCityNameError] = useState({\n    gate: false,\n    message: \"\",\n  });\n\n  const dateConstructor = (d) => {\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = d.getMonth() + 1;\n    let year = d.getFullYear();\n\n    if (date < 10) {\n      date = `0${date}`;\n    }\n    if (month < 10) {\n      month = `0${month}`;\n    }\n\n    return `${day} ${date}.${month}.${year}`;\n  };\n\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      if (e.target.value !== \"\") {\n        fetch(\n          `${api.base}weather?q=${localization}&units=metric&APPID=${api.key}`\n        )\n          .then((response) => response.json())\n          .then((data) => {\n            if (data.cod === \"404\") {\n              setCityNameError({ gate: true, message: data.message });\n              setWeather(\"\");\n              setLocalization(\"\");\n            } else {\n              setWeather(data);\n              setLocalization(\"\");\n              if (cityNameError.gate === true)\n                setCityNameError({ gate: false, message: data.message });\n            }\n          });\n      }\n    }\n  };\n  const weatherIconSelector = (weather) => {\n    const icons = [\"fas fa-sun\", \"fas fa-cloud\", \"fas fa-cloud-showers-heavy\"];\n    if (weather === \"Clear\") {\n      return icons[0];\n    } else if (weather === \"Clouds\") {\n      return icons[1];\n    } else if (weather === \"Rain\") {\n      return icons[2];\n    }\n  };\n  return (\n    <div\n      className={\n        typeof weather.main != \"undefined\"\n          ? weather.main.temp < 16\n            ? \"app cold\"\n            : \"app\"\n          : \"app default\"\n      }\n    >\n      <div className=\"wrapper\">\n        <div className=\"searchSpace\">\n          <input\n            type=\"text\"\n            placeholder=\"City...\"\n            onChange={(e) => setLocalization(e.target.value)}\n            onKeyPress={search}\n            value={localization}\n          />\n        </div>\n        {typeof weather.main != \"undefined\" ||\n        cityNameError.gate === \"false\" ? (\n          <div className=\"informationBox\">\n            <div className=\"informationBox_Info\">\n              <span>\n                {weather.name}, {weather.sys.country}\n              </span>\n              <span>{dateConstructor(new Date())}</span>\n            </div>\n            <div className=\"informationBox_WeatherInfo\">\n              <div className=\"weatherInfoWrapper\">\n                <i className={weatherIconSelector(weather.weather[0].main)}></i>\n                <p>{Math.round(weather.main.temp) + \"Â°C\"}</p>\n                <p>{weather.weather[0].main}</p>\n              </div>\n            </div>\n          </div>\n        ) : null}\n        {cityNameError.gate === true ? (\n          <h1 className=\"errorMessage\">{cityNameError.message}</h1>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}